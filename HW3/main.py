# -*- coding: utf-8 -*-
"""ML2023-HW3-ImageClassification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15A_8ilH-6-T3HOmSFrKbjDinBJl-s-16

# HW3 Image Classification
## We strongly recommend that you run with [Kaggle](https://www.kaggle.com/t/86ca241732c04da99aca6490080bae73) for this homework

If you have any questions, please contact the TAs via TA hours, NTU COOL, or email to mlta-2023-spring@googlegroups.com

# Check GPU Type
"""

# !nvidia-smi

"""# Get Data
Notes: if the links are dead, you can download the data directly from Kaggle and upload it to the workspace, or you can use the Kaggle API to directly download the data into colab.

"""

# Download Link
# Link 1 (Dropbox): https://www.dropbox.com/s/up5q1gthsz3v0dq/food-11.zip?dl=0
# Link 2 (Google Drive): https://drive.google.com/file/d/1tbGNwk1yGoCBdu4Gi_Cia7EJ9OhubYD9/view?usp=share_link
# Link 3: Kaggle Competition.

# (1) dropbox link
# !wget -O food11.zip https://www.dropbox.com/s/up5q1gthsz3v0dq/food-11.zip?dl=0

# (2) google drive link
# !gdown --id '1tbGNwk1yGoCBdu4Gi_Cia7EJ9OhubYD9' --output food11.zip

# ! unzip food11.zip

"""# Import Packages"""
import numpy as np
import pandas as pd
import torch
import os
import torch.nn as nn
from torchvision.transforms import autoaugment, transforms
from PIL import Image
from torch.utils.data import ConcatDataset, DataLoader, Subset, Dataset
# from torchvision.datasets import DatasetFolder, VisionDataset
import torchvision.models as models
from tqdm.auto import tqdm
import random
from torch.utils.tensorboard import SummaryWriter
from torchsummary import summary
import torch.nn.functional as F
import datetime
from fmix import sample_mask

myseed = 11922189  # set a random seed for reproducibility
torch.backends.cudnn.deterministic = True
torch.backends.cudnn.benchmark = False
np.random.seed(myseed)
torch.manual_seed(myseed)
if torch.cuda.is_available():
    torch.cuda.manual_seed_all(myseed)
    
    
# hyperparameters
do_train = True
do_test = True
batch_size =32
n_epochs = 1000
patience = 100
lr = 1e-1
num_workers = 8
model_name = 'resnet50'
cross_valid_num = 4
pretrained = False
pretrained_model = f'{model_name}_{cross_valid_num}_0.001_round2.ckpt'
save_model = f'{model_name}_{cross_valid_num}_{lr}_round3.ckpt'
test_model = f'resnet50_5_0.001_round2.ckpt'
TTA_count = 5
tfm_weight = 0.5 / TTA_count
WEIGHTS = torch.tensor([0.5] + [tfm_weight] * TTA_count).to('cuda')
image_size = 224


"""# Transforms
Torchvision provides lots of useful utilities for image preprocessing, data *wrapping* as well as data augmentation.

Please refer to PyTorch official website for details about different transforms.
"""

# https://zhuanlan.zhihu.com/p/430563265
num_bins = 31
augmentation_space = {
    # op_name: (magnitudes, signed)
    "Identity": (torch.tensor(0.0), False),
    "ShearX": (torch.linspace(0.0, 0.99, num_bins), True),
    "ShearY": (torch.linspace(0.0, 0.99, num_bins), True),
    "TranslateX": (torch.linspace(0.0, 32.0, num_bins), True),
    "TranslateY": (torch.linspace(0.0, 32.0, num_bins), True),
    "Rotate": (torch.linspace(0.0, 135.0, num_bins), True),
    "Brightness": (torch.linspace(0.0, 0.99, num_bins), True),
    "Color": (torch.linspace(0.0, 0.99, num_bins), True),
    "Contrast": (torch.linspace(0.0, 0.99, num_bins), True),
    "Sharpness": (torch.linspace(0.0, 0.99, num_bins), True),
    "Posterize": (8 - (torch.arange(num_bins) / ((num_bins - 1) / 6)).round().int(), False),
    "Solarize": (torch.linspace(255.0, 0.0, num_bins), False),
    "AutoContrast": (torch.tensor(0.0), False),
    "Equalize": (torch.tensor(0.0), False),
}

# Normally, We don't need augmentations in testing and validation.
# All we need here is to resize the PIL image and transform it into Tensor.
test_tfm = transforms.Compose([
    transforms.Resize((image_size, image_size)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# However, it is also possible to use augmentation in the testing phase.
# You may use train_tfm to produce a variety of images and then test using ensemble methods
train_tfm = transforms.Compose([
    transforms.RandomResizedCrop((image_size, image_size)),
    transforms.RandomHorizontalFlip(),
    autoaugment.TrivialAugmentWide(),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    transforms.RandomErasing(),
])

"""# Datasets
The data is labelled by the name, so we load images and label while calling '__getitem__'
"""

class FoodDataset(Dataset):

    def __init__(self,path, train_tfm=None, test_tfm=None, files=None, TTA_count=5):
        super(FoodDataset).__init__()
        self.path = path
        self.files = sorted([os.path.join(path,x) for x in os.listdir(path) if x.endswith(".jpg")])
        if files != None:
            self.files = files
            
        self.train_tfm = train_tfm
        self.test_tfm = test_tfm
  
    def __len__(self):
        return len(self.files)
  
    def __getitem__(self,idx):
        fname = self.files[idx]
        im = Image.open(fname)
        if self.test_tfm:
            if TTA_count > 1:
                im_list = [self.test_tfm(im)]
                for i in range(TTA_count):
                    im_list.append(self.train_tfm(im))
                im = torch.stack(im_list)
            else:
                im = self.test_tfm(im)
        elif self.train_tfm:
            im = self.train_tfm(im)
        
        try:
            label = int(fname.split("/")[-1].split("_")[0])
            label = F.one_hot(torch.tensor(label), num_classes=11)
        except:
            label = -1 # test has no label
            
        return im,label

"""# Model"""

class Classifier(nn.Module):
    def __init__(self, model_name):
        super(Classifier, self).__init__()
        
        model_zoo = {
            'resnet18': models.resnet18,
            'resnet50': models.resnet50,
            'efficientnet_v2_s': models.efficientnet_v2_s,
            'efficientnet_v2_m': models.efficientnet_v2_m,
        }
        
        self.cnn = model_zoo[model_name](weights=None)
        self.fc = nn.Sequential(
            nn.Linear(1000, 512),
            nn.ReLU(),
            nn.Linear(512, 11)
        )

    def forward(self, x):
        return self.fc(self.cnn(x))
    
# https://github.com/CoinCheung/pytorch-loss/blob/master/focal_loss.py
class FocalLossV1(nn.Module):

    def __init__(self,
                 alpha=0.25,
                 gamma=2,
                 reduction='mean',):
        super(FocalLossV1, self).__init__()
        self.alpha = alpha
        self.gamma = gamma
        self.reduction = reduction
        self.crit = nn.BCEWithLogitsLoss(reduction='none')

    def forward(self, logits, label):
        '''
        Usage is same as nn.BCEWithLogits:
            >>> criteria = FocalLossV1()
            >>> logits = torch.randn(8, 19, 384, 384)
            >>> lbs = torch.randint(0, 2, (8, 19, 384, 384)).float()
            >>> loss = criteria(logits, lbs)
        '''
        probs = torch.sigmoid(logits)
        coeff = torch.abs(label - probs).pow(self.gamma).neg()
        log_probs = torch.where(logits >= 0,
                F.softplus(logits, -1, 50),
                logits - F.softplus(logits, 1, 50))
        log_1_probs = torch.where(logits >= 0,
                -logits + F.softplus(logits, -1, 50),
                -F.softplus(logits, 1, 50))
        loss = label * self.alpha * log_probs + (1. - label) * (1. - self.alpha) * log_1_probs
        loss = loss * coeff

        if self.reduction == 'mean':
            loss = loss.mean()
        if self.reduction == 'sum':
            loss = loss.sum()
        return loss
    
# https://www.kaggle.com/code/ar2017/pytorch-efficientnet-train-aug-cutmix-fmix
def rand_bbox(size, lam):
    W = size[2]
    H = size[3]
    cut_rat = np.sqrt(1. - lam)
    cut_w = np.int64(W * cut_rat)
    cut_h = np.int64(H * cut_rat)

    # uniform
    cx = np.random.randint(W)
    cy = np.random.randint(H)

    bbx1 = np.clip(cx - cut_w // 2, 0, W)
    bby1 = np.clip(cy - cut_h // 2, 0, H)
    bbx2 = np.clip(cx + cut_w // 2, 0, W)
    bby2 = np.clip(cy + cut_h // 2, 0, H)
    return bbx1, bby1, bbx2, bby2

def cutmix(data, targets, alpha):
    indices = torch.randperm(data.size(0))
    shuffled_data = data[indices]
    shuffled_targets = targets[indices]

    lam = np.clip(np.random.beta(alpha, alpha),0.3,0.4)
    bbx1, bby1, bbx2, bby2 = rand_bbox(data.size(), lam)
    new_data = data.clone()
    new_data[:, :, bby1:bby2, bbx1:bbx2] = data[indices, :, bby1:bby2, bbx1:bbx2]
    # adjust lambda to exactly match pixel ratio
    lam = 1 - ((bbx2 - bbx1) * (bby2 - bby1) / (data.size()[-1] * data.size()[-2]))
    targets = targets * lam + shuffled_targets * (1 - lam)

    return new_data, targets

def fmix(data, targets, alpha, decay_power, shape, max_soft=0.0, reformulate=False):
    lam, mask = sample_mask(alpha, decay_power, shape, max_soft, reformulate)
    # mask =torch.tensor(mask, device=device).float()
    indices = torch.randperm(data.size(0))
    shuffled_data = data[indices]
    shuffled_targets = targets[indices]
    x1 = torch.from_numpy(mask).to(device)*data
    x2 = torch.from_numpy(1-mask).to(device)*shuffled_data
    targets = targets * lam + shuffled_targets * (1 - lam)

    
    return (x1+x2), targets


"""# Configurations"""

# "cuda" only when GPUs are available.
device = "cuda" if torch.cuda.is_available() else "cpu"

if do_train:
    
    # Initialize a model, and put it on the device specified.
    model = Classifier(model_name).to(device)
    # For the classification task, we use cross-entropy as the measurement of performance.
    # criterion = nn.CrossEntropyLoss(label_smoothing=0.2)
    criterion = FocalLossV1()
    # optimizer = torch.optim.Adam(model.parameters(), lr=lr, weight_decay=1e-4)
    # optimizer = torch.optim.AdamW(model.parameters(), lr=lr, weight_decay=0.05)
    optimizer = torch.optim.SGD(model.parameters(), lr=lr, weight_decay=1e-4, momentum=0.9)
    start_epoch = 0
    if pretrained:
        checkpoint = torch.load(pretrained_model)
        model.load_state_dict(checkpoint['model_state_dict'])
        # optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
        start_epoch = checkpoint['epoch']

    """# Dataloader"""

    # Construct train and valid datasets.
    # The argument "loader" tells how torchvision reads the data.
    path = "./train"
    train_data_paths = [os.path.join(path,x) for x in os.listdir(path) if x.endswith(".jpg")]
    path = "./valid"
    valid_data_paths = [os.path.join(path,x) for x in os.listdir(path) if x.endswith(".jpg")]

    train_data_paths = train_data_paths + valid_data_paths
    random.seed(myseed)
    random.shuffle(train_data_paths)
    total_len = len(train_data_paths)

    if cross_valid_num ==1:
        train_files = train_data_paths[:int(total_len/5*4)]
        valid_files = train_data_paths[int(total_len/5*4):]
    elif cross_valid_num == 2:
        train_files = train_data_paths[:int(total_len/5*3)] + train_data_paths[int(total_len/5*4):]
        valid_files = train_data_paths[int(total_len/5*3):int(total_len/5*4)]
    elif cross_valid_num == 3:
        train_files = train_data_paths[:int(total_len/5*2)] + train_data_paths[int(total_len/5*3):]
        valid_files = train_data_paths[int(total_len/5*2):int(total_len/5*3)]
    elif cross_valid_num == 4:
        train_files = train_data_paths[:int(total_len/5*1)] + train_data_paths[int(total_len/5*2):]
        valid_files = train_data_paths[int(total_len/5*1):int(total_len/5*2)]
    else:
        train_files = train_data_paths[int(total_len/5*1):]
        valid_files = train_data_paths[:int(total_len/5*1)]

    print(f'train len = {len(train_files)}')
    print(f'valid len = {len(valid_files)}')    

    train_set = FoodDataset("./train", train_tfm=train_tfm, files=train_files)
    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=num_workers, pin_memory=True)
    valid_set = FoodDataset("./valid", train_tfm=train_tfm, test_tfm=test_tfm, files=valid_files, TTA_count=TTA_count)
    valid_loader = DataLoader(valid_set, batch_size=batch_size, shuffle=True, num_workers=num_workers, pin_memory=True)

    """# Start Training"""

    # Initialize trackers, these are not parameters and should not be changed
    stale = 0
    best_acc = 0
    
    print(save_model[:-5])
    writer = SummaryWriter(f'runs/{save_model[:-5]}_{datetime.datetime.now()}')

    for epoch in range(start_epoch, n_epochs):

        # ---------- Training ----------
        # Make sure the model is in train mode before training.
        model.train()

        # These are used to record information in training.
        train_loss = []
        train_accs = []

        for batch in tqdm(train_loader):

            # A batch consists of image data and corresponding labels.
            imgs, labels = batch
            imgs = imgs.to(device)
            labels = labels.to(device)
            #imgs = imgs.half()
            #print(imgs.shape,labels.shape)
            
            mix_decision = np.random.rand()
            if mix_decision < 0.25:
                imgs, labels = cutmix(imgs, labels, 1.)
            elif mix_decision >=0.25 and mix_decision < 0.5:
                imgs, labels = fmix(imgs, labels, alpha=1., decay_power=5., shape=(image_size,image_size))
                imgs = imgs.float()
                

            # Forward the data. (Make sure data and model are on the same device.)
            logits = model(imgs)

            # Calculate the cross-entropy loss.
            # We don't need to apply softmax before computing cross-entropy as it is done automatically.
            
            loss = criterion(logits, labels)

            # Gradients stored in the parameters in the previous step should be cleared out first.
            optimizer.zero_grad()

            # Compute the gradients for parameters.
            loss.backward()

            # Clip the gradient norms for stable training.
            grad_norm = nn.utils.clip_grad_norm_(model.parameters(), max_norm=10)

            # Update the parameters with computed gradients.
            optimizer.step()

            # Compute the accuracy for current batch.
            acc = (logits.argmax(dim=-1) == labels.argmax(dim=-1)).float().mean()

            # Record the loss and accuracy.
            train_loss.append(loss.item())
            train_accs.append(acc)

        train_loss = sum(train_loss) / len(train_loss)
        train_acc = sum(train_accs) / len(train_accs)

        # ---------- Validation ----------
        # Make sure the model is in eval mode so that some modules like dropout are disabled and work normally.
        model.eval()

        # These are used to record information in validation.
        valid_loss = []
        valid_accs = []

        # Iterate the validation set by batches.
        for batch in tqdm(valid_loader):
            imgs, labels = batch
            
            imgs = imgs.to(device)
            size = len(imgs)
            imgs = imgs.reshape((size*(TTA_count+1), 3, image_size, image_size))
            with torch.no_grad():
                logits = model(imgs)
            logits = logits.reshape(size, TTA_count+1, 11)
            logits = torch.softmax(logits, dim=-1)
            logits = torch.matmul(WEIGHTS, logits)

            # Compute the accuracy for current batch.
            acc = (logits.argmax(dim=-1) == labels.to(device).argmax(dim=-1)).float().mean()

            # Record the loss and accuracy.
            valid_accs.append(acc)
            #break

        # The average loss and accuracy for entire validation set is the average of the recorded values.
        valid_acc = sum(valid_accs) / len(valid_accs)

        # Print the information.
        print(f"[{epoch + 1:03d}/{n_epochs:03d}] loss = {train_loss:.5f}, acc = {train_acc:.5f} Valid acc = {valid_acc:.5f}")

        writer.add_scalar('Accuracy/train', train_acc, epoch)
        writer.add_scalar('Accuracy/valid', valid_acc, epoch)
        writer.add_scalar('Loss/train', train_loss, epoch)
        
        # save models
        if valid_acc > best_acc:
            print(f"Best model found at epoch {epoch}, saving model")
            torch.save({
                'epoch': epoch,
                'model_state_dict': model.state_dict(),
                'optimizer_state_dict': optimizer.state_dict(),
            }, save_model)
            best_acc = valid_acc
            stale = 0
        else:
            stale += 1
            if stale > patience:
                print(f"No improvment {patience} consecutive epochs, early stopping")
                break

if do_test:
    """# Dataloader for test"""

    # Construct test datasets.
    # The argument "loader" tells how torchvision reads the data.
    test_set = FoodDataset("./test", train_tfm=train_tfm, test_tfm=test_tfm, files=None, TTA_count=5)
    test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=True)

    """# Testing and generate prediction CSV"""
    print(f'Load model {test_model}')

    model_best = Classifier(model_name).to(device)
    model_best.load_state_dict(torch.load(test_model)['model_state_dict'])
    model_best.eval()
    prediction = []
    with torch.no_grad():
        for imgs,_ in tqdm(test_loader):
            imgs = imgs.to(device)
            size = len(imgs)
            imgs = imgs.reshape((size*(TTA_count+1), 3, image_size, image_size))
            logits = model_best(imgs)
            logits = logits.reshape(size, TTA_count+1, 11)
            logits = torch.softmax(logits, dim=-1)
            logits = torch.matmul(WEIGHTS, logits)
            test_label = np.argmax(logits.cpu().data.numpy(), axis=1)
            prediction += test_label.squeeze().tolist()

    # create test csv
    def pad4(i):
        return "0"*(4-len(str(i)))+str(i)
    df = pd.DataFrame()
    df["Id"] = [pad4(i) for i in range(len(test_set))]
    df["Category"] = prediction
    df.to_csv("submission.csv",index = False)

# """# Q1. Augmentation Implementation
# ## Implement augmentation by finishing train_tfm in the code with image size of your choice. 
# ## Directly copy the following block and paste it on GradeScope after you finish the code
# ### Your train_tfm must be capable of producing 5+ different results when given an identical image multiple times.
# ### Your  train_tfm in the report can be different from train_tfm in your training code.

# """

# train_tfm = transforms.Compose([
#     # Resize the image into a fixed shape (height = width = 128)
#     transforms.Resize((128, 128)),
#     # You can add some transforms here.
#     transforms.ToTensor(),
# ])

# """# Q2. Visual Representations Implementation
# ## Visualize the learned visual representations of the CNN model on the validation set by implementing t-SNE (t-distributed Stochastic Neighbor Embedding) on the output of both top & mid layers (You need to submit 2 images). 

# """

# import torch
# import numpy as np
# from sklearn.manifold import TSNE
# import matplotlib.pyplot as plt
# from tqdm import tqdm
# import matplotlib.cm as cm
# import torch.nn as nn

# device = 'cuda' if torch.cuda.is_available() else 'cpu'

# # Load the trained model
# model = Classifier().to(device)
# state_dict = torch.load(f"{_exp_name}_best.ckpt")
# model.load_state_dict(state_dict)
# model.eval()

# print(model)

# # Load the vaildation set defined by TA
# valid_set = FoodDataset("./valid", tfm=test_tfm)
# valid_loader = DataLoader(valid_set, batch_size=64, shuffle=False, num_workers=0, pin_memory=True)

# # Extract the representations for the specific layer of model
# index = ... # You should find out the index of layer which is defined as "top" or 'mid' layer of your model.
# features = []
# labels = []
# for batch in tqdm(valid_loader):
#     imgs, lbls = batch
#     with torch.no_grad():
#         logits = model.cnn[:index](imgs.to(device))
#         logits = logits.view(logits.size()[0], -1)
#     labels.extend(lbls.cpu().numpy())
#     logits = np.squeeze(logits.cpu().numpy())
#     features.extend(logits)
    
# features = np.array(features)
# colors_per_class = cm.rainbow(np.linspace(0, 1, 11))

# # Apply t-SNE to the features
# features_tsne = TSNE(n_components=2, init='pca', random_state=42).fit_transform(features)

# # Plot the t-SNE visualization
# plt.figure(figsize=(10, 8))
# for label in np.unique(labels):
#     plt.scatter(features_tsne[labels == label, 0], features_tsne[labels == label, 1], label=label, s=5)
# plt.legend()
# plt.show()