# -*- coding: utf-8 -*-
"""ML2023Spring - HW2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wzeiVy2g7HpSjlidUr0Gi50NnHBWTkvN

# **Homework 2: Phoneme Classification**

Objectives:
* Solve a classification problem with deep neural networks (DNNs).
* Understand recursive neural networks (RNNs).

If you have any questions, please contact the TAs via TA hours, NTU COOL, or email to mlta-2023-spring@googlegroups.com

# Download Data
Download data from google drive, then unzip it.

You should have
- `libriphone/train_split.txt`: training metadata
- `libriphone/train_labels`: training labels
- `libriphone/test_split.txt`: testing metadata
- `libriphone/feat/train/*.pt`: training feature
- `libriphone/feat/test/*.pt`:  testing feature

after running the following block.

> **Notes: if the google drive link is dead, you can download the data directly from [Kaggle](https://www.kaggle.com/c/ml2023spring-hw2/data) and upload it to the workspace.**
"""

# !pip install --upgrade gdown

# # Main link
# !gdown --id '1N1eVIDe9hKM5uiNRGmifBlwSDGiVXPJe' --output libriphone.zip
# # !gdown --id '1qzCRnywKh30mTbWUEjXuNT2isOCAPdO1' --output libriphone.zip

# !unzip -q libriphone.zip
# !ls libriphone


"""# Hyper-parameters"""

do_train = True
do_test = True

# data prarameters
train_ratio = 0.8           # the ratio of data used for training, the rest will be used for validation

# training parameters
seed = 11922189              # random seed
batch_size = 8               # batch size
num_epoch = 30               # the number of training epoch
learning_rate = 2e-4         # learning rate
weight_decay = 0.05          # weight_decay
dropout = 0.4                # dropout
model_path = './model_lstm_1_2e-4_1_test.ckpt'  # the path where the checkpoint will be saved
pretrained = False
model_pretrained_path = './model_lstm_1_2e-3_1.ckpt'
early_stop = 100

# model parameters
input_dim = 39
output_dim = 41
rnn_layers = 7
rnn_dim = 256
fc_layers = 0
fc_dim = 256

"""# Some Utility Functions
**Fixes random number generator seeds for reproducibility.**
"""

import os
import random
import numpy as np
from tqdm import tqdm

import torch
import torch.nn as nn
import torch.nn.functional as F

from torch.utils.data import Dataset
from torch.utils.data import DataLoader

import gc

from torch.utils.tensorboard import SummaryWriter
from torchsummary import summary

def same_seeds(seed):
    random.seed(seed) 
    np.random.seed(seed)  
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed) 
    torch.backends.cudnn.benchmark = False
    torch.backends.cudnn.deterministic = True

"""**Helper functions to pre-process the training data from raw MFCC features of each utterance.**

A phoneme may span several frames and is dependent to past and future frames. \
Hence we concatenate neighboring phonemes for training to achieve higher accuracy. The **concat_feat** function concatenates past and future k frames (total 2k+1 = n frames), and we predict the center frame.

Feel free to modify the data preprocess functions, but **do not drop any frame** (if you modify the functions, remember to check that the number of frames are the same as mentioned in the slides)
"""

def load_feat(path):
    feat = torch.load(path)
    return feat

def shift(x, n):
    if n < 0:
        left = x[0].repeat(-n, 1)
        right = x[:n]
    elif n > 0:
        right = x[-1].repeat(n, 1)
        left = x[n:]
    else:
        return x

    return torch.cat((left, right), dim=0)

def concat_feat(x, concat_n):
    assert concat_n % 2 == 1 # n must be odd
    if concat_n < 2:
        return x
    seq_len, feature_dim = x.size(0), x.size(1)
    x = x.repeat(1, concat_n) 
    x = x.view(seq_len, concat_n, feature_dim).permute(1, 0, 2) # concat_n, seq_len, feature_dim
    mid = (concat_n // 2)
    for r_idx in range(1, mid+1):
        x[mid + r_idx, :] = shift(x[mid + r_idx], r_idx)
        x[mid - r_idx, :] = shift(x[mid - r_idx], -r_idx)

    return x.permute(1, 0, 2).view(seq_len, concat_n * feature_dim)

def preprocess_data(split, feat_dir, phone_path, train_ratio=0.8, random_seed=1213):
    class_num = 41 # NOTE: pre-computed, should not need change

    if split == 'train' or split == 'val':
        mode = 'train'
    elif split == 'test':
        mode = 'test'
    else:
        raise ValueError('Invalid \'split\' argument for dataset: PhoneDataset!')

    label_dict = {}
    if mode == 'train':
        for line in open(os.path.join(phone_path, f'{mode}_labels.txt')).readlines():
            line = line.strip('\n').split(' ')
            label_dict[line[0]] = [int(p) for p in line[1:]]
        
        # split training and validation data
        usage_list = open(os.path.join(phone_path, 'train_split.txt')).readlines()
        random.seed(random_seed)
        random.shuffle(usage_list)
        # train_len = int(len(usage_list) * train_ratio)
        # usage_list = usage_list[:train_len] if split == 'train' else usage_list[train_len:]
        train_len = int(len(usage_list))
        if split == 'train':
            # usage_list = usage_list[:int(train_len/5*4)]
            # usage_list = usage_list[:int(train_len/5*3)] + usage_list[int(train_len/5*4):]
            # usage_list = usage_list[:int(train_len/5*2)] + usage_list[int(train_len/5*3):]
            # usage_list = usage_list[:int(train_len/5*1)] + usage_list[int(train_len/5*2):]
            usage_list = usage_list[int(train_len/5):]
        else:
            # usage_list = usage_list[int(train_len/5*4):]
            # usage_list = usage_list[int(train_len/5*3):int(train_len/5*4)]
            # usage_list = usage_list[int(train_len/5*2):int(train_len/5*3)]
            # usage_list = usage_list[int(train_len/5*1):int(train_len/5*2)]
            usage_list = usage_list[:int(train_len/5)]

    elif mode == 'test':
        usage_list = open(os.path.join(phone_path, 'test_split.txt')).readlines()

    usage_list = [line.strip('\n') for line in usage_list]
    print('[Dataset] - # phone classes: ' + str(class_num) + ', number of utterances for ' + split + ': ' + str(len(usage_list)))

    X = []
    if mode == 'train':
        y = []

    idx = 0
    for i, fname in tqdm(enumerate(usage_list)):
        feat = load_feat(os.path.join(feat_dir, mode, f'{fname}.pt'))
        cur_len = len(feat)
        if mode == 'train':
            label = torch.LongTensor(label_dict[fname])
            y.append(label)

        X.append(feat)

        idx += cur_len

    print(f'[INFO] {split} set')
    print(len(X))
    if mode == 'train':
        print(len(y))
        return X, y
    else:
        return X

"""# Dataset"""

class LibriDataset(Dataset):
    def __init__(self, X, y=None):
        self.data = X
        if y is not None:
            self.label = y
        else:
            self.label = None

    def __getitem__(self, idx):
        if self.label is not None:
            return self.data[idx], self.label[idx]
        else:
            return self.data[idx]

    def __len__(self):
        return len(self.data)

"""# Model
Feel free to modify the structure of the model.
"""
    
class BasicBlock(nn.Module):
    def __init__(self, input_dim, output_dim, dropout):
        super(BasicBlock, self).__init__()

        self.block = nn.Sequential(
            nn.Linear(input_dim, output_dim),
            nn.LeakyReLU(),
            nn.Dropout(dropout),
        )

    def forward(self, x):
        x = self.block(x)
        return x


class Classifier(nn.Module):
    def __init__(self, 
                 input_dim, 
                 output_dim=41, 
                 fc_layers=1, 
                 fc_dim=256, 
                 rnn_layers=1, 
                 rnn_dim=256, 
                 dropout=0.5):
        super(Classifier, self).__init__()
        
        self.input_dim = input_dim
        self.output_dim = output_dim
        self.fc_layers = fc_layers
        self.fc_dim = fc_dim
        self.rnn_layers = rnn_layers
        self.rnn_dim = rnn_dim
        self.dropout = dropout

        # self.encoder = nn.GRU(
        self.encoder = nn.LSTM(
            input_size=input_dim, 
            hidden_size=rnn_dim, 
            num_layers=rnn_layers, 
            dropout=dropout, 
            bidirectional=True,
            batch_first=True
        )
        
        self.fc = nn.Sequential(
            BasicBlock(self.rnn_dim * 2, fc_dim, dropout),
            *[BasicBlock(fc_dim, fc_dim, dropout) for i in range(fc_layers)],
            nn.Linear(fc_dim, output_dim)
        )

    def forward(self, x):
        x = nn.utils.rnn.pad_sequence(x, batch_first=True)
        x, _ = self.encoder(x)
        x = self.fc(x)
        return x
            


"""# Dataloader"""

same_seeds(seed)
device = 'cuda' if torch.cuda.is_available() else 'cpu'
print(f'DEVICE: {device}')


"""# Training"""

if do_train:
    
    # preprocess data
    train_X, train_y = preprocess_data(split='train', feat_dir='./libriphone/feat', phone_path='./libriphone', train_ratio=train_ratio, random_seed=seed)
    val_X, val_y = preprocess_data(split='val', feat_dir='./libriphone/feat', phone_path='./libriphone', train_ratio=train_ratio, random_seed=seed)

    # get dataset
    train_set = LibriDataset(train_X, train_y)
    val_set = LibriDataset(val_X, val_y)

    # remove raw feature to save memory
    del train_X, train_y, val_X, val_y
    gc.collect()
    
    def train_collate(batch):
        data = [item[0].to(device) for item in batch]
        target = [item[1].to(device) for item in batch]
        return [data, target]

    # get dataloader
    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, collate_fn=train_collate)
    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False, collate_fn=train_collate)
    
    
    writer = SummaryWriter()

    import optuna
    def objective(trial):

        # fc_layers = trial.suggest_categorical('fc_layers', [0, 1, 2, 3])
        # fc_dim = trial.suggest_categorical('fc_dim', [128, 256, 512])
        # rnn_layers = trial.suggest_categorical('rnn_layers', [4, 5, 6, 7])
        # rnn_dim = trial.suggest_categorical('rnn_dim', [256, 512])
        # dropout = trial.suggest_categorical('dropout', [0.1, 0.2, 0.3, 0.4, 0.5])
        # learning_rate = trial.suggest_categorical('learning_rate', [5e-3, 2e-3, 1e-3])
        # weight_decay = trial.suggest_categorical('weight_decay', [1e-4, 5e-4, 1e-3, 5e-3, 1e-2, 5e-2])
        # batch_size = trial.suggest_categorical('batch_size', [32, 16, 8, 4])
        print(f'fc_layers = {fc_layers}')
        print(f'fc_dim = {fc_dim}')
        print(f'rnn_layers = {rnn_layers}')
        print(f'rnn_dim = {rnn_dim}')
        print(f'dropout = {dropout}')
        print(f'learning_rate = {learning_rate}')
        print(f'weight_decay = {weight_decay}')
        print(f'batch_size = {batch_size}')
        

        # create model, define a loss function, and optimizer
        model = Classifier(input_dim, output_dim, fc_layers, fc_dim, rnn_layers, rnn_dim, dropout).to(device)
        criterion = nn.CrossEntropyLoss() 
        optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate, weight_decay=weight_decay)
        if pretrained:
            model.load_state_dict(torch.load(model_pretrained_path))

        step = 0
        best_acc = 0.0
        early_stop_conut = 0
        stop_training = False
        for epoch in range(num_epoch):
            train_acc = 0.0
            train_size = 0
            val_acc = 0.0
            val_size = 0

            # training
            model.train() # set the model to training mode
            for i, batch in enumerate(tqdm(train_loader)):
                features, labels = batch

                optimizer.zero_grad() 
                outputs = model(features)
                outputs = outputs.view(outputs.shape[0]*outputs.shape[1], -1)
                labels = nn.utils.rnn.pad_sequence(labels, batch_first=True, padding_value=-100).reshape(-1)
                loss = criterion(outputs, labels)

                loss.backward() 
                optimizer.step() 

                step += 1

                _, train_pred = torch.max(outputs, 1) # get the index of the class with the highest probability
                train_acc += (train_pred.detach() == labels.detach()).sum().item()
                train_size += (-100 != labels.detach()).sum().item()
                
            train_acc /= train_size

            # validation
            if len(val_set) > 0:
                model.eval() # set the model to evaluation mode
                with torch.no_grad():
                    for i, batch in enumerate(tqdm(val_loader)):
                        features, labels = batch
                        outputs = model(features)
                        outputs = outputs.view(outputs.shape[0]*outputs.shape[1], -1)
                        labels = nn.utils.rnn.pad_sequence(labels, batch_first=True, padding_value=-100).reshape(-1)

                        _, val_pred = torch.max(outputs, 1) 
                        val_acc += (val_pred.cpu() == labels.cpu()).sum().item()
                        val_size += (-100 != labels.detach()).sum().item()
                        
                val_acc /= val_size

                print(f'[{epoch+1:03d}/{num_epoch:03d}] Train Acc: {train_acc:3.5f} | Val Acc: {val_acc:3.5f}')

                writer.add_scalar('Accuracy/train', train_acc, step)
                writer.add_scalar('Accuracy/valid', val_acc, step)

                # if the model improves, save a checkpoint at this epoch
                if val_acc > best_acc:
                    early_stop_conut = 0
                    best_acc = val_acc
                    torch.save(model.state_dict(), model_path)
                    print(f'saving model with acc {best_acc:.5f}')
                else:
                    early_stop_conut += 1
                    if early_stop_conut > early_stop:
                        stop_training = True
                        break


            else:
                print(f'[{epoch+1:03d}/{num_epoch:03d}] Train Acc: {train_acc:3.5f}')

                writer.add_scalar('Accuracy/train', train_acc, step)
                torch.save(model.state_dict(), model_path)
                print(f'saving model at last epoch: {epoch}')

            if stop_training:
                break
            

        return best_acc
    

    study = optuna.create_study(direction="maximize")
    study.optimize(objective, n_trials=1)
    print('Number of finished trials:', len(study.trials))
    print('Best trial parameters:', study.best_trial.params)
    print('Best score:', study.best_value)

    del train_set, val_set
    del train_loader, val_loader
    gc.collect()

"""# Testing
Create a testing dataset, and load model from the saved checkpoint.
"""

if do_test:
    
    def test_collate(batch):
        data = [item.to(device) for item in batch]
        return data
    
    # load data
    test_X = preprocess_data(split='test', feat_dir='./libriphone/feat', phone_path='./libriphone')
    test_set = LibriDataset(test_X, None)
    test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, collate_fn=test_collate)
            
    # load model
    model = Classifier(input_dim, output_dim, fc_layers, fc_dim, rnn_layers, rnn_dim, dropout).to(device)
    model.load_state_dict(torch.load(model_path))

    """Make prediction."""

    pred = []

    model.eval()
    with torch.no_grad():
        for i, batch in enumerate(tqdm(test_loader)):
            features = batch
            outputs = model(features)

            _, test_pred = torch.max(outputs, -1) # get the index of the class with the highest probability
            for p, f in zip(test_pred, features):
                p = p[:len(f)]
                pred.extend(p.detach().cpu().tolist())

    """Write prediction to a CSV file.

    After finish running this block, download the file `prediction.csv` from the files section on the left-hand side and submit it to Kaggle.
    """

    with open('prediction.csv', 'w') as f:
        f.write('Id,Class\n')
        for i, y in enumerate(pred):
            f.write('{},{}\n'.format(i, y))