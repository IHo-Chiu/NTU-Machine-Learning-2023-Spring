# -*- coding: utf-8 -*-
"""ML2023Spring_HW8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iqvGMVMkmTynKI8UQWaYeXxdQXeO7CKM

# **Homework 8 - Anomaly Detection**

If there are any questions, please contact mlta-2023-spring@googlegroups.com

Slide:    [Link](https://docs.google.com/presentation/d/18LkR8qulwSbi3SVoLl1XNNGjQQ_qczs_35lrJWOmHCk/edit?usp=sharing)ã€€Kaggle: [Link](https://www.kaggle.com/t/c76950cc460140eba30a576ca7668d28)

# Set up the environment

## Package installation
"""

# Training progress bar
# !pip install -q qqdm

"""## Downloading data"""

# !git clone https://github.com/chiyuanhsiao/ml2023spring-hw8

"""# Import packages"""

import random
import numpy as np
import torch
from torch import nn
from torch.utils.data import DataLoader, RandomSampler, SequentialSampler, TensorDataset
import torchvision.transforms as transforms
import torch.nn.functional as F
from torch.autograd import Variable
import torchvision.models as models
from torch.optim import Adam, AdamW
from qqdm import qqdm, format_str
import pandas as pd
from torchvision.transforms.functional import crop

"""# Loading data"""

train = np.load('ml2023spring-hw8/trainingset.npy', allow_pickle=True)
test = np.load('ml2023spring-hw8/testingset.npy', allow_pickle=True)

print(train.shape)
print(test.shape)

"""## Random seed
Set the random seed to a certain value for reproducibility.
"""

def same_seeds(seed):
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)
    torch.backends.cudnn.benchmark = False
    torch.backends.cudnn.deterministic = True

same_seeds(11922189)

"""# Autoencoder

# Models & loss
"""

class fcn_autoencoder(nn.Module):
    def __init__(self):
        super(fcn_autoencoder, self).__init__()
        self.encoder = nn.Sequential(
            nn.Linear(64 * 64 * 3, 512),
            nn.LeakyReLU(),
            nn.Linear(512, 14),
            nn.LeakyReLU(),
        )    # Hint: dimension of latent space can be adjusted
        
        self.decoder = nn.Sequential(
            nn.Linear(14, 512),
            nn.LeakyReLU(),
            nn.Linear(512, 64 * 64 * 3),
            nn.Tanh()
        )

    def forward(self, x):
        x = self.encoder(x)
        x = self.decoder(x)
        return x
    
class conv_autoencoder(nn.Module):
    def __init__(self):
        super(conv_autoencoder, self).__init__()
        self.encoder = nn.Sequential(
            nn.Conv2d(3, 12, 4, stride=2, padding=1),         
            nn.ReLU(),
            nn.Conv2d(12, 24, 4, stride=2, padding=1),        
            nn.ReLU(),
			      nn.Conv2d(24, 48, 4, stride=2, padding=1),         
            nn.ReLU(),
        )   # Hint:  dimension of latent space can be adjusted
        self.decoder = nn.Sequential(
			      nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),
            nn.ReLU(),
			      nn.ConvTranspose2d(24, 12, 4, stride=2, padding=1), 
            nn.ReLU(),
            nn.ConvTranspose2d(12, 3, 4, stride=2, padding=1),
            nn.Tanh(),
        )

    def forward(self, x):
        x = self.encoder(x)
        x = self.decoder(x)
        return x

class VAE(nn.Module):
    def __init__(self):
        super(VAE, self).__init__()
        self.encoder = nn.Sequential(
            nn.Conv2d(3, 12, 4, stride=2, padding=1),            
            nn.ReLU(),
            nn.Conv2d(12, 24, 4, stride=2, padding=1),    
            nn.ReLU(),
        )
        self.enc_out_1 = nn.Sequential(
            nn.Conv2d(24, 48, 4, stride=2, padding=1),  
            nn.ReLU(),
        )
        self.enc_out_2 = nn.Sequential(
            nn.Conv2d(24, 48, 4, stride=2, padding=1),
            nn.ReLU(),
        )
        # Hint: can add more layers to encoder and decoder
        self.decoder = nn.Sequential(
			      nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1), 
            nn.ReLU(),
			      nn.ConvTranspose2d(24, 12, 4, stride=2, padding=1), 
            nn.ReLU(),
            nn.ConvTranspose2d(12, 3, 4, stride=2, padding=1), 
            nn.Tanh(),
        )

    def encode(self, x):
        h1 = self.encoder(x)
        return self.enc_out_1(h1), self.enc_out_2(h1)

    def reparametrize(self, mu, logvar):
        std = logvar.mul(0.5).exp_()
        if torch.cuda.is_available():
            eps = torch.cuda.FloatTensor(std.size()).normal_()
        else:
            eps = torch.FloatTensor(std.size()).normal_()
        eps = Variable(eps)
        return eps.mul(std).add_(mu)

    def decode(self, z):
        return self.decoder(z)

    def forward(self, x):
        mu, logvar = self.encode(x)
        z = self.reparametrize(mu, logvar)
        return self.decode(z), mu, logvar


def loss_vae(recon_x, x, mu, logvar, criterion):
    """
    recon_x: generating images
    x: origin images
    mu: latent mean
    logvar: latent log variance
    """
    mse = criterion(recon_x, x)
    KLD_element = mu.pow(2).add_(logvar.exp()).mul_(-1).add_(1).add_(logvar)
    KLD = torch.sum(KLD_element).mul_(-0.5)
    return mse + KLD

    
"""# Dataset module

Module for obtaining and processing data. The transform function here normalizes image's pixels from [0, 255] to [-1.0, 1.0].

"""

class CustomTensorDataset(TensorDataset):
    """TensorDataset with support of transforms.
    """
    def __init__(self, tensors):
        self.tensors = tensors
        if tensors.shape[-1] == 3:
            self.tensors = tensors.permute(0, 3, 1, 2)
        
        self.transform = transforms.Compose([
            transforms.Lambda(lambda x: x.to(torch.float32)),
            transforms.Lambda(lambda x: crop(x,14,14,26,50)),
            transforms.Resize((64,64), antialias=True ),
            transforms.Lambda(lambda x: 2. * x/255. - 1.),
        ])
        
    def __getitem__(self, index):
        x = self.tensors[index]
        
        if self.transform:
            # mapping images to [-1.0, 1.0]
            x = self.transform(x)

        return x

    def __len__(self):
        return len(self.tensors)

"""# Training

## Configuration
"""

# Training hyperparameters
num_epochs = 200
batch_size = 256 # Hint: batch size may be lower
learning_rate = 1e-4
do_train = True
do_test = True

# Build training dataloader
x = torch.from_numpy(train)
train_dataset = CustomTensorDataset(x)

train_sampler = RandomSampler(train_dataset)
train_dataloader = DataLoader(train_dataset, sampler=train_sampler, batch_size=batch_size, num_workers=8)

# Model
model_type = 'fcn'   # selecting a model type from {'cnn', 'fcn', 'vae', 'resnet'}
model_classes = {'fcn': fcn_autoencoder(), 'cnn': conv_autoencoder(), 'vae': VAE()}
model = model_classes[model_type].cuda()

# Loss and optimizer
criterion = nn.MSELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)
scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, 30)

"""## Training loop"""

if do_train:
    best_loss = np.inf
    model.train()

    qqdm_train = qqdm(range(num_epochs), desc=format_str('bold', 'Description'))
    for epoch in qqdm_train:
        tot_loss = list()
        for data in train_dataloader:
            # ===================loading=====================
            img = data.float().cuda()
            if model_type in ['fcn']:
                img = img.view(img.shape[0], -1)
            # ===================forward=====================
            output = model(img)
            if model_type in ['vae']:
                loss, recons_loss, kld_loss = loss_vae(output[0], img, output[1], output[2], criterion, kld_weight=kld_weight)
            else:
                loss = criterion(output, img)

            tot_loss.append(loss.item())
            # ===================backward====================
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            scheduler.step()
        # ===================save_best====================
        mean_loss = np.mean(tot_loss)
        if mean_loss < best_loss:
            best_loss = mean_loss
            torch.save(model, 'best_model_{}.pt'.format(model_type))
        # ===================log========================
        qqdm_train.set_infos({
            'epoch': f'{epoch + 1:.0f}/{num_epochs:.0f}',
            'loss': f'{mean_loss:.4f}',
        })
        # ===================save_last========================
        torch.save(model, 'last_model_{}.pt'.format(model_type))
        
"""# Inference
Model is loaded and generates its anomaly score predictions.

## Initialize
- dataloader
- model
- prediction file
"""

if do_test:
    eval_batch_size = 256

    # build testing dataloader
    data = torch.tensor(test, dtype=torch.float32)
    test_dataset = CustomTensorDataset(data)
    test_sampler = SequentialSampler(test_dataset)
    test_dataloader = DataLoader(test_dataset, sampler=test_sampler, batch_size=eval_batch_size, num_workers=1)
    eval_loss = nn.MSELoss(reduction='none')

    # load trained model
    checkpoint_path = f'best_model_{model_type}.pt'
    model = torch.load(checkpoint_path)
    model.eval()

    # prediction file 
    out_file = 'prediction.csv'

    anomality = list()
    with torch.no_grad():
        for i, data in enumerate(test_dataloader):
            img = data.float().cuda()
            if model_type in ['fcn']:
                img = img.view(img.shape[0], -1)
            output = model(img)
            if model_type in ['vae']:
                output = output[0]
            if model_type in ['fcn']:
                loss = eval_loss(output, img).sum(-1)
            else:
                loss = eval_loss(output, img).sum([1, 2, 3])
            anomality.append(loss)
    anomality = torch.cat(anomality, axis=0)
    anomality = torch.sqrt(anomality).reshape(len(test), 1).cpu().numpy()

    df = pd.DataFrame(anomality, columns=['score'])
    df.to_csv(out_file, index_label = 'ID')
    
    
    
# plot
# import matplotlib.pyplot as plt
# sample = train_dataset[123]
# sample = sample.reshape(1,3,64,64) #2. * x/255. - 1.

# sample_ori = np.array(sample[0].permute(1,2,0))
# sample_ori = (sample_ori + 1)/2*255
# plt.imshow(sample_ori.astype(np.uint8))
# plt.savefig('original.jpg')

# checkpoint_path = f'best_model_{model_type}.pt'
# model = torch.load(checkpoint_path)
# model.eval()
# with torch.no_grad():
#     img = sample.float().cuda()
#     if model_type in ['fcn']:
#         img = img.reshape(img.shape[0], -1)
#     output = model(img)
#     if model_type in ['fcn']:
#         output = output.reshape(3,64,64)
#     if model_type in ['vae']:
#         output = output[0]

#     output = output.cpu().permute(1,2,0)    
#     output = np.array(output)
#     output = (output + 1)/2*255
#     plt.imshow(output.astype(np.uint8))
#     plt.savefig('reconstruct.jpg')
    
#     for i in range(z_dim):
#         img = sample.float().cuda()
#         if model_type in ['fcn']:
#             img = img.reshape(img.shape[0], -1)
#         output = model.encoder(img)
#         output[0][i] = output[0][i]*2
#         output = model.decoder(output)
#         if model_type in ['fcn']:
#             output = output.reshape(3,64,64)
#         if model_type in ['vae']:
#             output = output[0]

#         output = output.cpu().permute(1,2,0)    
#         output = np.array(output)
#         output = (output + 1)/2*255
#         plt.imshow(output.astype(np.uint8))
#         plt.savefig(f'reconstruct_larger{i}.jpg')
    
#     for i in range(z_dim):
#         img = sample.float().cuda()
#         if model_type in ['fcn']:
#             img = img.reshape(img.shape[0], -1)
#         output = model.encoder(img)
#         output[0][i] = output[0][i]/2
#         output = model.decoder(output)
#         if model_type in ['fcn']:
#             output = output.reshape(3,64,64)
#         if model_type in ['vae']:
#             output = output[0]

#         output = output.cpu().permute(1,2,0)    
#         output = np.array(output)
#         output = (output + 1)/2*255
#         plt.imshow(output.astype(np.uint8))
#         plt.savefig(f'reconstruct_smaller{i}.jpg')
# raise