# -*- coding: utf-8 -*-
"""ML2023_hw04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u-610KA-urqfJjDH5O0pecwfP--V9DQs

# Task description
- Classify the speakers of given features.
- Main goal: Learn how to use transformer.
- Baselines:
  - Easy: Run sample code and know how to use transformer.
  - Medium: Know how to adjust parameters of transformer.
  - Strong: Construct [conformer](https://arxiv.org/abs/2005.08100) which is a variety of transformer. 
  - Boss: Implement [Self-Attention Pooling](https://arxiv.org/pdf/2008.01077v1.pdf) & [Additive Margin Softmax](https://arxiv.org/pdf/1801.05599.pdf) to further boost the performance.

- Other links
  - Competiton: [link](https://www.kaggle.com/t/49ea0c385a974db5919ec67299ba2e6b)
  - Slide: [link](https://docs.google.com/presentation/d/1LDAW0GGrC9B6D7dlNdYzQL6D60-iKgFr/edit?usp=sharing&ouid=104280564485377739218&rtpof=true&sd=true)
  - Data: [link](https://github.com/googly-mingto/ML2023HW4/releases)

# Download dataset
- Data is [here](https://drive.google.com/drive/folders/1vI1kuLB-q1VilIftiwnPOCAeOOFfBZge?usp=sharing)
"""

# !wget https://github.com/googly-mingto/ML2023HW4/releases/download/data/Dataset.tar.gz.partaa
# !wget https://github.com/googly-mingto/ML2023HW4/releases/download/data/Dataset.tar.gz.partab
# !wget https://github.com/googly-mingto/ML2023HW4/releases/download/data/Dataset.tar.gz.partac
# !wget https://github.com/googly-mingto/ML2023HW4/releases/download/data/Dataset.tar.gz.partad

# !cat Dataset.tar.gz.part* > Dataset.tar.gz
# !rm Dataset.tar.gz.partaa
# !rm Dataset.tar.gz.partab
# !rm Dataset.tar.gz.partac
# !rm Dataset.tar.gz.partad
# # unzip the file
# !tar zxf Dataset.tar.gz
# !rm Dataset.tar.gz

# !tar zxf Dataset.tar.gz

import numpy as np
import torch
import random
import os
import json
import csv
import math
from pathlib import Path
from tqdm import tqdm
# from tqdm.notebook import tqdm
from torch.optim import AdamW, Optimizer
from torch.optim.lr_scheduler import LambdaLR
from torch.utils.data import Dataset, DataLoader, random_split
from torch.nn.utils.rnn import pad_sequence
import torch.nn as nn
import torch.nn.functional as F
from torchaudio.models import Conformer
from torch.utils.tensorboard import SummaryWriter
import datetime
from AMSloss import AdMSoftmaxLoss

def set_seed(seed):
    np.random.seed(seed)
    random.seed(seed)
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)
    torch.backends.cudnn.benchmark = False
    torch.backends.cudnn.deterministic = True

set_seed(11922189)

def parse_args():
    """arguments"""
    config = {
        "data_dir": "./Dataset",
        "save_path": "conformer.ckpt",
        # "save_path": "conformer_d_model=280_num_heads=1_ffn_dim=512_num_layers=6_dropout=0.1_conv=3_2023-03-24 23:01:08.126548.ckpt",
        "pretrained_path": "conformer_256_1.ckpt",
        "do_pretrained": False,
        "batch_size": 128,
        "n_workers": 8,
        "valid_steps": 500,
        "warmup_steps": 1000,
        "save_steps": 500,
        "total_steps": 200000,
        "do_train": True,
        "do_test": False,
        "output_path": "./output.csv",
        "segment_len": 128,
        "d_model": 280,
        "num_heads": 1,
        "ffn_dim": 512,
        "num_layers": 6,
        "dropout": 0.1,
        "lr": 1e-3,
        "depthwise_conv_kernel_size": 3,
    }

    return config


"""# Data

## Dataset
- Original dataset is [Voxceleb2](https://www.robots.ox.ac.uk/~vgg/data/voxceleb/vox2.html).
- The [license](https://creativecommons.org/licenses/by/4.0/) and [complete version](https://www.robots.ox.ac.uk/~vgg/data/voxceleb/files/license.txt) of Voxceleb2.
- We randomly select 600 speakers from Voxceleb2.
- Then preprocess the raw waveforms into mel-spectrograms.

- Args:
  - data_dir: The path to the data directory.
  - metadata_path: The path to the metadata.
  - segment_len: The length of audio segment for training. 
- The architecture of data directory \\
  - data directory \\
  |---- metadata.json \\
  |---- testdata.json \\
  |---- mapping.json \\
  |---- uttr-{random string}.pt \\

- The information in metadata
  - "n_mels": The dimention of mel-spectrogram.
  - "speakers": A dictionary. 
    - Key: speaker ids.
    - value: "feature_path" and "mel_len"


For efficiency, we segment the mel-spectrograms into segments in the traing step.
"""

class myDataset(Dataset):
    def __init__(self, data_dir, segment_len=128):
        self.data_dir = data_dir
        self.segment_len = segment_len
    
        # Load the mapping from speaker neme to their corresponding id. 
        mapping_path = Path(data_dir) / "mapping.json"
        mapping = json.load(mapping_path.open())
        self.speaker2id = mapping["speaker2id"]
    
        # Load metadata of training data.
        metadata_path = Path(data_dir) / "metadata.json"
        metadata = json.load(open(metadata_path))["speakers"]
    
        # Get the total number of speaker.
        self.speaker_num = len(metadata.keys())
        self.data = []
        for speaker in metadata.keys():
            for utterances in metadata[speaker]:
                self.data.append([utterances["feature_path"], self.speaker2id[speaker]])
 
    def __len__(self):
            return len(self.data)
 
    def __getitem__(self, index):
        feat_path, speaker = self.data[index]
        # Load preprocessed mel-spectrogram.
        mel = torch.load(os.path.join(self.data_dir, feat_path))

        # Segmemt mel-spectrogram into "segment_len" frames.
        if len(mel) > self.segment_len:
            # Randomly get the starting point of the segment.
            start = random.randint(0, len(mel) - self.segment_len)
            # Get a segment with "segment_len" frames.
            mel = torch.FloatTensor(mel[start:start+self.segment_len])
        else:
            mel = torch.FloatTensor(mel)
        # Turn the speaker id into long for computing loss later.
        speaker = torch.FloatTensor([speaker]).long()
        return mel, speaker
 
    def get_speaker_number(self):
        return self.speaker_num

"""## Dataloader
- Split dataset into training dataset(90%) and validation dataset(10%).
- Create dataloader to iterate the data.
"""


def collate_batch(batch):
    # Process features within a batch.
    """Collate a batch of data."""
    mel, speaker = zip(*batch)
    # Because we train the model batch by batch, we need to pad the features in the same batch to make their lengths the same.
    mel = pad_sequence(mel, batch_first=True, padding_value=-20)    # pad log 10^(-20) which is very small value.
    # mel: (batch size, length, 40)
    return mel, torch.FloatTensor(speaker).long()


def get_dataloader(data_dir, batch_size, n_workers, segment_len):
    """Generate dataloader"""
    dataset = myDataset(data_dir, segment_len)
    speaker_num = dataset.get_speaker_number()
    # Split dataset into training dataset and validation dataset
    trainlen = int(0.9 * len(dataset))
    lengths = [trainlen, len(dataset) - trainlen]
    trainset, validset = random_split(dataset, lengths)
    
    print(f'trainlen: {trainlen}')

    train_loader = DataLoader(
        trainset,
        batch_size=batch_size,
        shuffle=True,
        drop_last=True,
        num_workers=n_workers,
        pin_memory=True,
        collate_fn=collate_batch,
    )
    valid_loader = DataLoader(
        validset,
        batch_size=batch_size,
        num_workers=n_workers,
        drop_last=True,
        pin_memory=True,
        collate_fn=collate_batch,
    )

    return train_loader, valid_loader, speaker_num

"""# Model
- TransformerEncoderLayer:
  - Base transformer encoder layer in [Attention Is All You Need](https://arxiv.org/abs/1706.03762)
  - Parameters:
    - d_model: the number of expected features of the input (required).

    - nhead: the number of heads of the multiheadattention models (required).

    - dim_feedforward: the dimension of the feedforward network model (default=2048).

    - dropout: the dropout value (default=0.1).

    - activation: the activation function of intermediate layer, relu or gelu (default=relu).

- TransformerEncoder:
  - TransformerEncoder is a stack of N transformer encoder layers
  - Parameters:
    - encoder_layer: an instance of the TransformerEncoderLayer() class (required).

    - num_layers: the number of sub-encoder-layers in the encoder (required).

    - norm: the layer normalization component (optional).
"""

# https://gist.github.com/pohanchi/c77f6dbfbcbc21c5215acde4f62e4362
class SelfAttentionPooling(nn.Module):
    """
    Implementation of SelfAttentionPooling 
    Original Paper: Self-Attention Encoding and Pooling for Speaker Recognition
    https://arxiv.org/pdf/2008.01077v1.pdf
    """
    def __init__(self, input_dim):
        super(SelfAttentionPooling, self).__init__()
        self.W = nn.Linear(input_dim, 1)
        
    def forward(self, batch_rep):
        """
        input:
            batch_rep : size (N, T, H), N: batch size, T: sequence length, H: Hidden dimension
        
        attention_weight:
            att_w : size (N, T, 1)
        
        return:
            utter_rep: size (N, H)
        """
        softmax = nn.functional.softmax
        att_w = softmax(self.W(batch_rep).squeeze(-1)).unsqueeze(-1)
        utter_rep = torch.sum(batch_rep * att_w, dim=1)

        return utter_rep

class Classifier(nn.Module):
    def __init__(self, d_model=80, num_heads=4, ffn_dim=128, num_layers=4, n_spks=600, dropout=0.1, depthwise_conv_kernel_size=31):
        super().__init__()
        # Project the dimension of features from that of input into d_model.
        self.prenet = nn.Linear(40, d_model)
        
        self.encoder_layer = Conformer(
            input_dim=d_model,
            num_heads=num_heads,
            ffn_dim=ffn_dim,
            num_layers=num_layers,
            depthwise_conv_kernel_size=depthwise_conv_kernel_size,
            dropout=dropout,
        )

        self.selfAttentionPooling = SelfAttentionPooling(input_dim=d_model)
        
        # Project the the dimension of features from d_model into speaker nums.
        self.fc = nn.Linear(d_model, n_spks, bias=False)
        
        self.dropout = dropout

    def forward(self, mels):
        """
        args:
            mels: (batch size, length, 40)
        return:
            out: (batch size, n_spks)
        """
        # out: (batch size, length, d_model)
        out = self.prenet(mels)
        F.dropout(out, self.dropout, inplace=True)
        # out: (length, batch size, d_model)
        out = out.permute(1, 0, 2)
        # The encoder layer expect features in the shape of (length, batch size, d_model).
        out, _ = self.encoder_layer(out, torch.tensor([out.shape[1]] * out.shape[0]).to(out.device))
        # out: (batch size, length, d_model)
        out = out.transpose(0, 1)
#         # mean pooling
#         stats = out.mean(dim=1)
        stats = self.selfAttentionPooling(out)

        # out: (batch, n_spks)
        for W in self.fc.parameters():
            W = F.normalize(W, dim=1)
        stats = F.normalize(stats, dim=1)
        out = self.fc(stats)
        return out

"""# Learning rate schedule
- For transformer architecture, the design of learning rate schedule is different from that of CNN.
- Previous works show that the warmup of learning rate is useful for training models with transformer architectures.
- The warmup schedule
  - Set learning rate to 0 in the beginning.
  - The learning rate increases linearly from 0 to initial learning rate during warmup period.
"""


def get_cosine_schedule_with_warmup(
    optimizer: Optimizer,
    num_warmup_steps: int,
    num_training_steps: int,
    num_cycles: float = 0.5,
    last_epoch: int = -1,
):
    """
    Create a schedule with a learning rate that decreases following the values of the cosine function between the
    initial lr set in the optimizer to 0, after a warmup period during which it increases linearly between 0 and the
    initial lr set in the optimizer.

    Args:
        optimizer (:class:`~torch.optim.Optimizer`):
        The optimizer for which to schedule the learning rate.
        num_warmup_steps (:obj:`int`):
        The number of steps for the warmup phase.
        num_training_steps (:obj:`int`):
        The total number of training steps.
        num_cycles (:obj:`float`, `optional`, defaults to 0.5):
        The number of waves in the cosine schedule (the defaults is to just decrease from the max value to 0
        following a half-cosine).
        last_epoch (:obj:`int`, `optional`, defaults to -1):
        The index of the last epoch when resuming training.

    Return:
        :obj:`torch.optim.lr_scheduler.LambdaLR` with the appropriate schedule.
    """
    def lr_lambda(current_step):
        # Warmup
        if current_step < num_warmup_steps:
            return float(current_step) / float(max(1, num_warmup_steps))
        # decadence
        progress = float(current_step - num_warmup_steps) / float(
            max(1, num_training_steps - num_warmup_steps)
        )
        return max(
            0.0, 0.5 * (1.0 + math.cos(math.pi * float(num_cycles) * 2.0 * progress))
        )

    return LambdaLR(optimizer, lr_lambda, last_epoch)

"""# Model Function
- Model forward function.
"""


def model_fn(batch, model, criterion, device):
    """Forward a batch through the model."""

    mels, labels = batch
    mels = mels.to(device)
    labels = labels.to(device)

    outs = model(mels)

    loss = criterion(outs, labels)

    # Get the speaker id with highest probability.
    preds = outs.argmax(1)
    # Compute accuracy.
    accuracy = torch.mean((preds == labels).float())

    return loss, accuracy

"""# Validate
- Calculate accuracy of the validation set.
"""


def valid(dataloader, model, criterion, device): 
    """Validate on validation set."""

    model.eval()
    running_loss = 0.0
    running_accuracy = 0.0
    pbar = tqdm(total=len(dataloader.dataset), ncols=0, desc="Valid", unit=" uttr")

    for i, batch in enumerate(dataloader):
        with torch.no_grad():
            loss, accuracy = model_fn(batch, model, criterion, device)
            running_loss += loss.item()
            running_accuracy += accuracy.item()

        pbar.update(dataloader.batch_size)
        pbar.set_postfix(
            loss=f"{running_loss / (i+1):.2f}",
            accuracy=f"{running_accuracy / (i+1):.2f}",
        )

    pbar.close()
    model.train()

    return running_accuracy / len(dataloader)

"""# Inference

## Dataset of inference
"""


class InferenceDataset(Dataset):
    def __init__(self, data_dir):
        testdata_path = Path(data_dir) / "testdata.json"
        metadata = json.load(testdata_path.open())
        self.data_dir = data_dir
        self.data = metadata["utterances"]

    def __len__(self):
        return len(self.data)

    def __getitem__(self, index):
        utterance = self.data[index]
        feat_path = utterance["feature_path"]
        mel = torch.load(os.path.join(self.data_dir, feat_path))

        return feat_path, mel


def inference_collate_batch(batch):
    """Collate a batch of data."""
    feat_paths, mels = zip(*batch)

    return feat_paths, torch.stack(mels)


"""# Main function"""

def main(
    data_dir,
    save_path,
    pretrained_path,
    do_pretrained,
    batch_size,
    n_workers,
    valid_steps,
    warmup_steps,
    total_steps,
    save_steps,
    do_train,
    do_test,
    output_path,
    segment_len,
    d_model, 
    num_heads, 
    ffn_dim, 
    num_layers, 
    dropout,
    lr,
    depthwise_conv_kernel_size, 
):
    if do_train:
        
        import optuna
        def objective(trial):

            # d_model = trial.suggest_categorical('d_model', [260, 280, 300])
            # num_heads = trial.suggest_categorical('num_heads', [1, 2, 4])
            # ffn_dim = trial.suggest_categorical('ffn_dim', [384, 512])
            # num_layers = trial.suggest_categorical('num_layers', [3, 4, 5, 6, 7, 8, 9])
            # dropout = trial.suggest_categorical('dropout', [0.1, 0.2, 0.3, 0.4, 0.5])
            # depthwise_conv_kernel_size = trial.suggest_categorical('depthwise_conv_kernel_size', [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31])
            print(f'd_model = {d_model}')
            print(f'num_heads = {num_heads}')
            print(f'ffn_dim = {ffn_dim}')
            print(f'num_layers = {num_layers}')
            print(f'dropout = {dropout}')
            print(f'depthwise_conv_kernel_size = {depthwise_conv_kernel_size}')
    
            """Main function."""
            device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
            print(f"[Info]: Use {device} now!")

            train_loader, valid_loader, speaker_num = get_dataloader(data_dir, batch_size, n_workers, segment_len)
            train_iterator = iter(train_loader)
            print(f"[Info]: Finish loading data!",flush = True)

            model = Classifier(d_model=d_model, num_heads=num_heads, ffn_dim=ffn_dim, num_layers=num_layers, 
                               dropout=dropout, depthwise_conv_kernel_size=depthwise_conv_kernel_size).to(device)
            start_step = 0
            if do_pretrained:
                checkpoint = torch.load(pretrained_path)
                model.load_state_dict(checkpoint['model_state_dict'])
                start_step = checkpoint['step']

            # criterion = nn.CrossEntropyLoss(label_smoothing=0.1)
            criterion = AdMSoftmaxLoss(s=15.0, m=0.1)
            optimizer = AdamW(model.parameters(), lr=lr)
            scheduler = get_cosine_schedule_with_warmup(optimizer, warmup_steps, total_steps)
            print(f"[Info]: Finish creating model!",flush = True)

            best_accuracy = -1.0
            best_state_dict = None

            pbar = tqdm(total=valid_steps, ncols=0, desc="Train", unit=" step")
            new_save_path = f'{save_path[:-5]}_d_model={d_model}_num_heads={num_heads}_ffn_dim={ffn_dim}_num_layers={num_layers}_dropout={dropout}_conv={depthwise_conv_kernel_size}_{datetime.datetime.now()}.ckpt'
            writer = SummaryWriter(f'runs/{new_save_path[:-5]}')

            for step in range(start_step, start_step+total_steps):
                # Get data
                try:
                    batch = next(train_iterator)
                except StopIteration:
                    train_iterator = iter(train_loader)
                    batch = next(train_iterator)

                loss, accuracy = model_fn(batch, model, criterion, device)
                batch_loss = loss.item()
                batch_accuracy = accuracy.item()

                # Updata model
                loss.backward()
                optimizer.step()
                scheduler.step()
                optimizer.zero_grad()

                # Log
                pbar.update()
                pbar.set_postfix(
                    loss=f"{batch_loss:.2f}",
                    accuracy=f"{batch_accuracy:.2f}",
                    step=step + 1,
                )

                # Do validation
                if (step + 1) % valid_steps == 0:
                    pbar.close()

                    valid_accuracy = valid(valid_loader, model, criterion, device)

                    # keep the best model
                    if valid_accuracy > best_accuracy:
                        best_accuracy = valid_accuracy
                        best_state_dict = model.state_dict()
                    else:
                        best_state_dict = None

                    pbar = tqdm(total=valid_steps, ncols=0, desc="Train", unit=" step")
                    writer.add_scalar('Accuracy/valid', valid_accuracy, step+1)
                    writer.add_scalar('Accuracy/train', batch_accuracy, step+1)
                    writer.add_scalar('Loss/train', batch_loss, step+1)
                    writer.add_scalar('Accuracy/best', best_accuracy, step+1)

                # Save the best model so far.
                if (step + 1) % save_steps == 0 and best_state_dict is not None:
                    torch.save({
                        'step': save_steps,
                        'model_state_dict': best_state_dict,
                    }, new_save_path)
                    pbar.write(f"Step {step + 1}, best model saved. (accuracy={best_accuracy:.4f})")

            pbar.close()
            
            return best_accuracy
        
        study = optuna.create_study(direction="maximize")
        study.optimize(objective, n_trials=100)
        print('Number of finished trials:', len(study.trials))
        print('Best trial parameters:', study.best_trial.params)
        print('Best score:', study.best_value)
    
    if do_test:
        """Main function."""
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        print(f"[Info]: Use {device} now!")

        mapping_path = Path(data_dir) / "mapping.json"
        mapping = json.load(mapping_path.open())

        dataset = InferenceDataset(data_dir)
        dataloader = DataLoader(
            dataset,
            batch_size=1,
            shuffle=False,
            drop_last=False,
            num_workers=8,
            collate_fn=inference_collate_batch,
        )
        print(f"[Info]: Finish loading data!",flush = True)

        speaker_num = len(mapping["id2speaker"])
        model = Classifier(d_model=d_model, num_heads=num_heads, ffn_dim=ffn_dim, num_layers=num_layers, 
                           dropout=dropout, depthwise_conv_kernel_size=depthwise_conv_kernel_size).to(device)
        checkpoint = torch.load(save_path)
        model.load_state_dict(checkpoint['model_state_dict'])
        model.eval()
        print(f"[Info]: Finish creating model!",flush = True)

        results = [["Id", "Category"]]
        for feat_paths, mels in tqdm(dataloader):
            with torch.no_grad():
                mels = mels.to(device)
                outs = model(mels)
                preds = outs.argmax(1).cpu().numpy()
                for feat_path, pred in zip(feat_paths, preds):
                    results.append([feat_path, mapping["id2speaker"][str(pred)]])

        with open(output_path, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerows(results)


if __name__ == "__main__":
    main(**parse_args())
