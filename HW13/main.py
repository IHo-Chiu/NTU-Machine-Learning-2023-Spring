# -*- coding: utf-8 -*-
"""ml2023spring_hw13_samplecode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rW8tgC9QpNmvOo-e7MXI2LH1ojFXjsmu

# Homework 13 - Network 

Author: Chen-Wei Ke (b08501098@ntu.edu.tw), modified from ML2022-HW13 (Liang-Hsuan Tseng)

If you have any questions, feel free to ask: mlta-2023-spring@googlegroups.com

[**Link to HW13 Slides**](https://docs.google.com/presentation/d/1QAVMbnabmmMNvmugPlHMg_GVKaYrKa6hoTSFeJl9OCs/edit?usp=sharing)

## Outline

* [Packages](#Packages) - intall some required packages.
* [Dataset](#Dataset) - something you need to know about the dataset.
* [Configs](#Configs) - the configs of the experiments, you can change some hyperparameters here.
* [Architecture_Design](#Architecture_Design) - depthwise and pointwise convolution examples and some useful links.
* [Knowledge_Distillation](#Knowledge_Distillation) - KL divergence loss for knowledge distillation and some useful links.
* [Training](#Training) - training loop implementation modified from HW3.
* [Inference](#Inference) - create submission.csv by using the student_best.ckpt from the previous experiment.

### Packages
First, we need to import some useful packages. If the torchsummary package are not intalled, please install it via `pip install torchsummary`
"""

# Import some useful packages for this homework
import numpy as np
import pandas as pd
import torch
import os
import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms as transforms
from PIL import Image
from torch.utils.data import ConcatDataset, DataLoader, Subset, Dataset # "ConcatDataset" and "Subset" are possibly useful
from torchvision.datasets import DatasetFolder, VisionDataset
from torchsummary import summary
from tqdm.auto import tqdm
import random
from torchvision.transforms import autoaugment
import torchvision.models as models
from fmix import sample_mask
from torch.utils.tensorboard import SummaryWriter
import datetime
import math
# !nvidia-smi # list your current GPU

"""### Configs
In this part, you can specify some variables and hyperparameters as your configs.
"""

TTA_count = 5
tfm_weight = 0.6 / TTA_count
WEIGHTS = torch.tensor([0.4] + [tfm_weight] * TTA_count).to('cuda')
image_size = 224

cfg = {
    'dataset_root': './Food-11',
    'save_dir': './outputs',
    'exp_name': "v3",
    'batch_size': 64,
    'lr': 1e-1,
    'seed': 20220013,
    'loss_fn_type': 'KD', # simple baseline: CE, medium baseline: KD. See the Knowledge_Distillation part for more information.
    'weight_decay': 1e-5,
    'grad_norm_max': 10,
    'n_epochs': 999, # train more steps to pass the medium baseline.
    'patience': 50,
    'retrain': False,
    'alpha': 0.5,
    'temperature': 0.9,
}

myseed = cfg['seed']  # set a random seed for reproducibility
torch.backends.cudnn.deterministic = True
torch.backends.cudnn.benchmark = False
np.random.seed(myseed)
torch.manual_seed(myseed)
random.seed(myseed)
if torch.cuda.is_available():
    torch.cuda.manual_seed_all(myseed)

save_path = os.path.join(cfg['save_dir'], cfg['exp_name']) # create saving directory
os.makedirs(save_path, exist_ok=True)

# define simple logging functionality
log_fw = open(f"{save_path}/log.txt", 'w') # open log file to save log outputs
def log(text):     # define a logging function to trace the training process
    print(text)
    log_fw.write(str(text)+'\n')
    log_fw.flush()

log(cfg)  # log your configs to the log file

"""### Dataset
We use Food11 dataset for this homework, which is similar to homework3. But remember, Please DO NOT utilize the dataset of HW3. We've modified the dataset, so you should only access the dataset by loading it in this kaggle notebook or through the links provided in the HW13 colab notebooks.
"""

# # fetch and download the dataset from github (about 1.12G)
# import gdown
# !wget -O Food-11.tar.gz https://www.dropbox.com/s/v97fi9xrwp9b964/food11-hw13.tar.gz?dl=0
# # gdown.download('https://drive.google.com/uc?id=1fTMLOeQ0-131Cq6ZLUndiwlTwE2CinYP', 'Food-11.tar.gz')

# # extract the data
# !tar -xzf ./Food-11.tar.gz # Could take some time
# # !tar -xzvf ./Food-11.tar.gz # use this command if you want to checkout the whole process.

# for dirname, _, filenames in os.walk('./Food-11'):
#     if len(filenames) > 0:
#         print(f"{dirname}: {len(filenames)} files.") # Show the file amounts in each split.

"""Next, specify train/test transform for image data augmentation.
Torchvision provides lots of useful utilities for image preprocessing, data wrapping as well as data augmentation.

Please refer to [PyTorch official website](https://pytorch.org/vision/stable/transforms.html) for details about different transforms. You can also apply the knowledge or experience you learned in HW3.
"""

normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
# define training/testing transforms
test_tfm = transforms.Compose([
    # It is not encouraged to modify this part if you are using the provided teacher model. This transform is stardard and good enough for testing.
    transforms.Resize(256),
    transforms.CenterCrop(image_size),
    transforms.ToTensor(),
    normalize,
])

train_tfm = transforms.Compose([
    transforms.RandomResizedCrop((image_size, image_size)),
    transforms.RandomHorizontalFlip(),
    autoaugment.TrivialAugmentWide(),
    transforms.ToTensor(),
    normalize,
    transforms.RandomErasing(),
])

class FoodDataset(Dataset):

    def __init__(self,path, train_tfm=None, test_tfm=None, files=None, TTA_count=5):
        super(FoodDataset).__init__()
        self.path = path
        self.files = sorted([os.path.join(path,x) for x in os.listdir(path) if x.endswith(".jpg")])
        if files != None:
            self.files = files
            
        self.train_tfm = train_tfm
        self.test_tfm = test_tfm
  
    def __len__(self):
        return len(self.files)
  
    def __getitem__(self,idx):
        fname = self.files[idx]
        im = Image.open(fname)
        if self.test_tfm:
            im_list = [self.test_tfm(im)]
            for i in range(TTA_count):
                im_list.append(self.train_tfm(im))
            im = torch.stack(im_list)
        elif self.train_tfm:
            im = self.train_tfm(im)
        
        try:
            label = int(fname.split("/")[-1].split("_")[0])
            label = F.one_hot(torch.tensor(label), num_classes=11)
        except:
            label = -1 # test has no label
            
        return im,label
    
path = os.path.join(cfg['dataset_root'],"training")
train_data_paths = [os.path.join(path,x) for x in os.listdir(path) if x.endswith(".jpg")]
path = os.path.join(cfg['dataset_root'], "validation")
valid_data_paths = [os.path.join(path,x) for x in os.listdir(path) if x.endswith(".jpg")]

train_data_paths = train_data_paths + valid_data_paths
random.seed(myseed)
random.shuffle(train_data_paths)
total_len = len(train_data_paths)
train_ratio = 0.9

train_files = train_data_paths[:int(total_len*train_ratio)]
valid_files = train_data_paths[int(total_len*train_ratio):]

# Form train/valid dataloaders
train_set = FoodDataset(os.path.join(cfg['dataset_root'],"training"), train_tfm=train_tfm, files=train_files)
train_loader = DataLoader(train_set, batch_size=cfg['batch_size'], shuffle=True, num_workers=8, pin_memory=True)

valid_set = FoodDataset(os.path.join(cfg['dataset_root'], "validation"), train_tfm=train_tfm, test_tfm=test_tfm, TTA_count=TTA_count, files=valid_files)
valid_loader = DataLoader(valid_set, batch_size=cfg['batch_size'], shuffle=False, num_workers=8, pin_memory=True)

print(f'train_set: {len(train_set)}')
print(f'valid_set: {len(valid_set)}')

"""### Architecture_Design

In this homework, you have to design a smaller network and make it perform well. Apparently, a well-designed architecture is crucial for such task. Here, we introduce the depthwise and pointwise convolution. These variants of convolution are some common techniques for architecture design when it comes to network compression.

<img src="https://i.imgur.com/LFDKHOp.png" width=400px>

* explanation of depthwise and pointwise convolutions:
    * [prof. Hung-yi Lee's slides(p.24~p.30, especially p.28)](https://speech.ee.ntu.edu.tw/~hylee/ml/ml2021-course-data/tiny_v7.pdf)

* other useful techniques
    * [group convolution](https://www.researchgate.net/figure/The-transformations-within-a-layer-in-DenseNets-left-and-CondenseNets-at-training-time_fig2_321325862) (Actually, depthwise convolution is a specific type of group convolution)
    * [SqueezeNet](!https://arxiv.org/abs/1602.07360)
    * [MobileNet](!https://arxiv.org/abs/1704.04861)
    * [ShuffleNet](!https://arxiv.org/abs/1707.01083)
    * [Xception](!https://arxiv.org/abs/1610.02357)
    * [GhostNet](!https://arxiv.org/abs/1911.11907)

After introducing depthwise and pointwise convolutions, let's define the **student network architecture**. Here, we have a very simple network formed by some regular convolution layers and pooling layers. You can replace the regular convolution layers with the depthwise and pointwise convolutions. In this way, you can further increase the depth or the width of your network architecture.
"""

# Define your student network here. You have to copy-paste this code block to HW13 GradeScope before deadline.
# We will use your student network definition to evaluate your results(including the total parameter amount).

# Example implementation of Depthwise and Pointwise Convolution
def dwpw_conv(in_channels, out_channels, kernel_size, stride=1, padding=0, bias=False):
    return nn.Sequential(
        nn.Conv2d(in_channels, in_channels, kernel_size, stride=stride, padding=padding, bias=bias, groups=in_channels), #depthwise convolution
        nn.Conv2d(in_channels, out_channels, 1, bias=bias), # pointwise convolution
        nn.BatchNorm2d(out_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),
        nn.ReLU(inplace=True),
    )

class BasicBlock(nn.Module):
    def __init__(self, in_channels=64, out_channels=64, kernel_size=3, skip_second_layer=False):
        super(BasicBlock, self).__init__()
        
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.skip_second_layer = skip_second_layer
        
        if self.in_channels == self.out_channels:
            self.conv1 = dwpw_conv(in_channels, out_channels, kernel_size=kernel_size, stride=1, padding=1, bias=False)
        else:
            self.conv1 = dwpw_conv(in_channels, out_channels, kernel_size=kernel_size, stride=2, padding=1, bias=False)
        if self.skip_second_layer == False:
            self.conv2 = dwpw_conv(out_channels, out_channels, kernel_size=kernel_size, stride=1, padding=1, bias=False)
        if self.in_channels != self.out_channels:
            self.downsample = dwpw_conv(in_channels, out_channels, kernel_size=1, stride=2, bias=False)
        
    def forward(self, x):
        out = self.conv1(x)
        if self.skip_second_layer == False:
            out = self.conv2(out)
        if self.in_channels != self.out_channels:
            x = self.downsample(x)
        return x + out

class StudentNet(nn.Module):
    def __init__(self):
        super().__init__()

        # ---------- TODO ----------
        # Modify your model architecture
        self.conv1 = dwpw_conv(3, 16, kernel_size=7, stride=2, padding=3, bias=False)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        self.layer1 = nn.Sequential(
            BasicBlock(16, 16, 3),
            BasicBlock(16, 16, 3),
        )
        self.layer2 = nn.Sequential(
            BasicBlock(16, 32, 3),
            BasicBlock(32, 32, 3, skip_second_layer=True),
            BasicBlock(32, 32, 3),
        )
        self.layer3 = nn.Sequential(
            BasicBlock(32, 64, 3, skip_second_layer=True),
            BasicBlock(64, 64, 3),
        )
        self.layer4 = nn.Sequential(
            BasicBlock(64, 128, 3, skip_second_layer=True),
            BasicBlock(128, 128, 3, skip_second_layer=True),
        )
        self.avgpool = nn.AdaptiveAvgPool2d(output_size=(1, 1))
        self.fc = nn.Linear(in_features=128, out_features=11, bias=True)

    def forward(self, x):
        x = self.conv1(x)
        x = self.maxpool(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)
        x = self.avgpool(x)
        x = x.view(x.size()[0], -1)
        return self.fc(x)

def get_student_model(): # This function should have no arguments so that we can get your student network by directly calling it.
    # you can modify or do anything here, just remember to return an nn.Module as your student network.
    return StudentNet()

# End of definition of your student model and the get_student_model API
# Please copy-paste the whole code block, including the get_student_model function.

"""After specifying the student network architecture, please use `torchsummary` package to get information about the network and verify the total number of parameters. Note that the total params of your student network should not exceed the limit (`Total params` in `torchsummary` ≤ 60,000)."""

# DO NOT modify this block and please make sure that this block can run sucessfully.
student_model = get_student_model()
summary(student_model, (3, image_size, image_size), device='cpu')
# You have to copy&paste the results of this block to HW13 GradeScope.
if cfg['retrain'] == True:
    ckpt_path = f"{save_path}/student_best.ckpt" # the ckpt path of the best student model.
    student_model.load_state_dict(torch.load(ckpt_path, map_location='cpu')) # load the state dict and set it to the student model

# Load provided teacher model (model architecture: resnet18, num_classes=11, test-acc ~= 89.9%)
teacher_model = torch.hub.load('pytorch/vision:v0.10.0', 'resnet50', weights=None, num_classes=11)
# load state dict
teacher_ckpt_path = "resnet50_2_0.001_test.ckpt"
teacher_model.load_state_dict(torch.load(teacher_ckpt_path, map_location='cpu')['model_state_dict'])

# Now you already know the teacher model's architecture. You can take advantage of it if you want to pass the strong or boss baseline.
# Source code of resnet in pytorch: (https://github.com/pytorch/vision/blob/main/torchvision/models/resnet.py)
# You can also see the summary of teacher model. There are 11,182,155 parameters totally in the teacher model
# summary(teacher_model, (3, 224, 224), device='cpu')

"""### Knowledge_Distillation

<img src="https://i.imgur.com/H2aF7Rv.png=100x" width="400px">

Since we have a learned big model, let it teach the other small model. In implementation, let the training target be the prediction of big model instead of the ground truth.

**Why it works?**
* If the data is not clean, then the prediction of big model could ignore the noise of the data with wrong labeled.
* There might have some relations between classes, so soft labels from teacher model might be useful. For example, Number 8 is more similar to 6, 9, 0 than 1, 7.


**How to implement?**
* $Loss = \alpha T^2 \times KL(p || q) + (1-\alpha)(\text{Original Cross Entropy Loss}), \text{where } p=softmax(\frac{\text{student's logits}}{T}), \text{and } q=softmax(\frac{\text{teacher's logits}}{T})$
* very useful link: [pytorch docs of KLDivLoss with examples](!https://pytorch.org/docs/stable/generated/torch.nn.KLDivLoss.html)
* original paper: [Distilling the Knowledge in a Neural Network](!https://arxiv.org/abs/1503.02531)

**Please be sure to carefully check each function's parameter requirements.**
"""

# https://github.com/CoinCheung/pytorch-loss/blob/master/focal_loss.py
class FocalLossV1(nn.Module):

    def __init__(self,
                 alpha=0.25,
                 gamma=2,
                 reduction='mean',):
        super(FocalLossV1, self).__init__()
        self.alpha = alpha
        self.gamma = gamma
        self.reduction = reduction
        self.crit = nn.BCEWithLogitsLoss(reduction='none')

    def forward(self, logits, label):
        '''
        Usage is same as nn.BCEWithLogits:
            >>> criteria = FocalLossV1()
            >>> logits = torch.randn(8, 19, 384, 384)
            >>> lbs = torch.randint(0, 2, (8, 19, 384, 384)).float()
            >>> loss = criteria(logits, lbs)
        '''
        probs = torch.sigmoid(logits)
        coeff = torch.abs(label - probs).pow(self.gamma).neg()
        log_probs = torch.where(logits >= 0,
                F.softplus(logits, -1, 50),
                logits - F.softplus(logits, 1, 50))
        log_1_probs = torch.where(logits >= 0,
                -logits + F.softplus(logits, -1, 50),
                -F.softplus(logits, 1, 50))
        loss = label * self.alpha * log_probs + (1. - label) * (1. - self.alpha) * log_1_probs
        loss = loss * coeff

        if self.reduction == 'mean':
            loss = loss.mean()
        if self.reduction == 'sum':
            loss = loss.sum()
        return loss
    
# https://www.kaggle.com/code/ar2017/pytorch-efficientnet-train-aug-cutmix-fmix
def rand_bbox(size, lam):
    W = size[2]
    H = size[3]
    cut_rat = np.sqrt(1. - lam)
    cut_w = np.int64(W * cut_rat)
    cut_h = np.int64(H * cut_rat)

    # uniform
    cx = np.random.randint(W)
    cy = np.random.randint(H)

    bbx1 = np.clip(cx - cut_w // 2, 0, W)
    bby1 = np.clip(cy - cut_h // 2, 0, H)
    bbx2 = np.clip(cx + cut_w // 2, 0, W)
    bby2 = np.clip(cy + cut_h // 2, 0, H)
    return bbx1, bby1, bbx2, bby2

def cutmix(data, targets, alpha):
    indices = torch.randperm(data.size(0))
    shuffled_data = data[indices]
    shuffled_targets = targets[indices]

    lam = np.clip(np.random.beta(alpha, alpha),0.3,0.4)
    bbx1, bby1, bbx2, bby2 = rand_bbox(data.size(), lam)
    new_data = data.clone()
    new_data[:, :, bby1:bby2, bbx1:bbx2] = data[indices, :, bby1:bby2, bbx1:bbx2]
    # adjust lambda to exactly match pixel ratio
    lam = 1 - ((bbx2 - bbx1) * (bby2 - bby1) / (data.size()[-1] * data.size()[-2]))
    targets = targets * lam + shuffled_targets * (1 - lam)

    return new_data, targets

def fmix(data, targets, alpha, decay_power, shape, max_soft=0.0, reformulate=False):
    lam, mask = sample_mask(alpha, decay_power, shape, max_soft, reformulate)
    # mask =torch.tensor(mask, device=device).float()
    indices = torch.randperm(data.size(0))
    shuffled_data = data[indices]
    shuffled_targets = targets[indices]
    x1 = torch.from_numpy(mask).to(device)*data
    x2 = torch.from_numpy(1-mask).to(device)*shuffled_data
    targets = targets * lam + shuffled_targets * (1 - lam)

    
    return (x1+x2), targets

# Implement the loss function with KL divergence loss for knowledge distillation.
# You also have to copy-paste this whole block to HW13 GradeScope.
kl_loss = nn.KLDivLoss(reduction="batchmean", log_target=True)
ce_loss = FocalLossV1()
def loss_fn_kd(student_logits, labels, teacher_logits, alpha=cfg['alpha'], temperature=cfg['temperature']):
    # ------------TODO-------------
    # Refer to the above formula and finish the loss function for knowkedge distillation using KL divergence loss and CE loss.
    # If you have no idea, please take a look at the provided useful link above.
    p = F.log_softmax(student_logits/temperature, dim=1)
    q = F.log_softmax(teacher_logits/temperature, dim=1)
    return alpha*temperature*temperature * kl_loss(p, q) + (1-alpha) * ce_loss(student_logits, labels)

# choose the loss function by the config
if cfg['loss_fn_type'] == 'CE':
    # For the classification task, we use cross-entropy as the default loss function.
    loss_fn = nn.CrossEntropyLoss() # loss function for simple baseline.

if cfg['loss_fn_type'] == 'KD': # KD stands for knowledge distillation
    loss_fn = loss_fn_kd # implement loss_fn_kd for the report question and the medium baseline.

# You can also adopt other types of knowledge distillation techniques for strong and boss baseline, but use function name other than `loss_fn_kd`
# For example:
# def loss_fn_custom_kd():
#     pass
# if cfg['loss_fn_type'] == 'custom_kd':
#     loss_fn = loss_fn_custom_kd

# "cuda" only when GPUs are available.
device = "cuda" if torch.cuda.is_available() else "cpu"
log(f"device: {device}")

# The number of training epochs and patience.
n_epochs = cfg['n_epochs']
patience = cfg['patience'] # If no improvement in 'patience' epochs, early stop

"""### Training
implement training loop for simple baseline, feel free to modify it.
"""

# Initialize a model, and put it on the device specified.
student_model.to(device)
teacher_model.to(device) # MEDIUM BASELINE

# Initialize optimizer, you may fine-tune some hyperparameters such as learning rate on your own.
# optimizer = torch.optim.Adam(student_model.parameters(), lr=cfg['lr'], weight_decay=cfg['weight_decay'])
optimizer = torch.optim.SGD(student_model.parameters(), lr=cfg['lr'], weight_decay=cfg['weight_decay'], momentum=0.9)


# Initialize trackers, these are not parameters and should not be changed
stale = 0
best_acc = 0.0

writer = SummaryWriter(f'{save_path}/run/{datetime.datetime.now()}')

teacher_model.eval()  # MEDIUM BASELINE
for epoch in range(n_epochs):

    # ---------- Training ----------
    # Make sure the model is in train mode before training.
    student_model.train()

    # These are used to record information in training.
    train_loss = []
    train_accs = []

    for batch in tqdm(train_loader):

        # A batch consists of image data and corresponding labels.
        imgs, labels = batch
        imgs = imgs.to(device)
        labels = labels.to(device)
        #imgs = imgs.half()
        #print(imgs.shape,labels.shape)
        
        mix_decision = np.random.rand()
        if mix_decision < 0.25:
            imgs, labels = cutmix(imgs, labels, 1.)
        elif mix_decision >=0.25 and mix_decision < 0.5:
            imgs, labels = fmix(imgs, labels, alpha=1., decay_power=5., shape=(image_size, image_size))
            imgs = imgs.float()

        # Forward the data. (Make sure data and model are on the same device.)
        with torch.no_grad():  # MEDIUM BASELINE
            teacher_logits = teacher_model(imgs)  # MEDIUM BASELINE

        logits = student_model(imgs)

        # Calculate the cross-entropy loss.
        # We don't need to apply softmax before computing cross-entropy as it is done automatically.
        loss = loss_fn(logits, labels, teacher_logits) # MEDIUM BASELINE
        # loss = loss_fn(logits, labels) # SIMPLE BASELINE
        # Gradients stored in the parameters in the previous step should be cleared out first.
        optimizer.zero_grad()

        # Compute the gradients for parameters.
        loss.backward()

        # Clip the gradient norms for stable training.
        grad_norm = nn.utils.clip_grad_norm_(student_model.parameters(), max_norm=cfg['grad_norm_max'])

        # Update the parameters with computed gradients.
        optimizer.step()

        # Compute the accuracy for current batch.
        acc = (logits.argmax(dim=-1) == labels.argmax(dim=-1)).float().mean()

        # Record the loss and accuracy.
        train_loss.append(loss.item())
        train_accs.append(acc)

    train_loss = sum(train_loss) / len(train_loss)
    train_acc = sum(train_accs) / len(train_accs)

    # ---------- Validation ----------
    # Make sure the model is in eval mode so that some modules like dropout are disabled and work normally.
    student_model.eval()

    # These are used to record information in validation.
    valid_accs = []

    # Iterate the validation set by batches.
    for batch in tqdm(valid_loader):

        # A batch consists of image data and corresponding labels.
        imgs, labels = batch
        imgs = imgs.to(device)
        labels = labels.to(device)

        size = len(imgs)
        imgs = imgs.reshape((size*(TTA_count+1), 3, image_size, image_size))
            
        # We don't need gradient in validation.
        # Using torch.no_grad() accelerates the forward process.
        with torch.no_grad():
            logits = student_model(imgs)
            # teacher_logits = teacher_model(imgs) # MEDIUM BASELINE
        
        logits = logits.reshape(size, TTA_count+1, 11)
        logits = torch.softmax(logits, dim=-1)
        logits = torch.matmul(WEIGHTS, logits)

        # Compute the accuracy for current batch.
        acc = (logits.argmax(dim=-1) == labels.argmax(dim=-1)).float().mean()

        # Record the loss and accuracy.
        valid_accs.append(acc)
        #break

    # The average loss and accuracy for entire validation set is the average of the recorded values.
    valid_acc = sum(valid_accs) / len(valid_accs)

    # update logs
    if valid_acc > best_acc:
        log(f"[ Train | {epoch + 1:03d}/{n_epochs:03d} ] loss = {train_loss:.5f}, acc = {train_acc:.5f}[ Valid | {epoch + 1:03d}/{n_epochs:03d} ] acc = {valid_acc:.5f} -> best")
    else:
        log(f"[ Train | {epoch + 1:03d}/{n_epochs:03d} ] loss = {train_loss:.5f}, acc = {train_acc:.5f}[ Valid | {epoch + 1:03d}/{n_epochs:03d} ] acc = {valid_acc:.5f}")

    writer.add_scalar('Accuracy/train', train_acc, epoch)
    writer.add_scalar('Accuracy/valid', valid_acc, epoch)
    writer.add_scalar('Loss/train', train_loss, epoch)

    # save models
    if valid_acc > best_acc:
        log(f"Best model found at epoch {epoch+1}, saving model")
        torch.save(student_model.state_dict(), f"{save_path}/student_best.ckpt") # only save best to prevent output memory exceed error
        best_acc = valid_acc
        stale = 0
    else:
        stale += 1
        if stale > patience:
            log(f"No improvment {patience} consecutive epochs, early stopping")
            break
log("Finish training")
log_fw.close()

"""### Inference
load the best model of the experiment and generate submission.csv
"""

# create dataloader for evaluation
eval_set = FoodDataset(os.path.join(cfg['dataset_root'], "evaluation"), train_tfm=train_tfm, test_tfm=test_tfm, TTA_count=5)
eval_loader = DataLoader(eval_set, batch_size=cfg['batch_size'], shuffle=False, num_workers=0, pin_memory=True)

# Load model from {exp_name}/student_best.ckpt
student_model_best = get_student_model() # get a new student model to avoid reference before assignment.
ckpt_path = f"{save_path}/student_best.ckpt" # the ckpt path of the best student model.
student_model_best.load_state_dict(torch.load(ckpt_path, map_location='cpu')) # load the state dict and set it to the student model
student_model_best.to(device) # set the student model to device

# Start evaluate
student_model_best.eval()
eval_preds = [] # storing predictions of the evaluation dataset

# Iterate the validation set by batches.
for batch in tqdm(eval_loader):
    # A batch consists of image data and corresponding labels.
    imgs, _ = batch
    imgs = imgs.to(device)
    size = len(imgs)
    imgs = imgs.reshape((size*(TTA_count+1), 3, image_size, image_size))
    # We don't need gradient in evaluation.
    # Using torch.no_grad() accelerates the forward process.
    with torch.no_grad():
        logits = student_model_best(imgs)
        logits = logits.reshape(size, TTA_count+1, 11)
        logits = torch.softmax(logits, dim=-1)
        logits = torch.matmul(WEIGHTS, logits)
        test_label = np.argmax(logits.cpu().data.numpy(), axis=1)
        preds = test_label.squeeze().tolist()
    # loss and acc can not be calculated because we do not have the true labels of the evaluation set.
    eval_preds += preds

def pad4(i):
    return "0"*(4-len(str(i))) + str(i)

# Save prediction results
ids = [pad4(i) for i in range(0,len(eval_set))]
categories = eval_preds

df = pd.DataFrame()
df['Id'] = ids
df['Category'] = categories
df.to_csv(f"{save_path}/submission.csv", index=False) # now you can download the submission.csv and upload it to the kaggle competition.

"""> Don't forget to answer the report questions on GradeScope!"""